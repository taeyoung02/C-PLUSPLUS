STL =  자료 구조와 알고리즘을 템플릿으로 제공하는 C++ 표준 라이브러리


- 배열

스택영역에 자료를 저장하고 컴파일시 공간을 확보
장점 : 자료를 순차적으로 저장할 수 있고 인덱스 번호로 접근 가능, 자료의 접근과 저장이 빠름
단점 : 1 한번 확보된 배열의 크기를 조절하기 어려우므로 메모리가 낭비되므로 비효율적
       2 중간 값 삽입 삭제가 쉽지 않다. (shift되므로 무거움)
- vector

동적 배열로써 배열의 단점 1이 보완됨
배열의 단점 2가 어렵고 기본 sdl에서는 (중간값 삽입 삭제)기능이 지원되지 않는다??(앞뒤로 넣는것은 가능)
데이터가 순차적으로 저장 되므로 검색속도가 빠르지 않음
데이터의 위치를 안다면 배열처럼 쉽게 접근 가능


- list

리스트는 vector의 단점인 중간값 삽입 삭제가 가능하게 만들어 졌습니다.
포인터로 다음 값을 찾아주는 방식이므로 모든 삽입 삭제가 용이함.
단점으로는 vector에서 가능했던 데이터의 위치로 값에 접근할 수 없음.
또한 순차 접근이라 검색도 느림.


- map

key, value 한쌍임
트리구조임
맵은 자동 정렬이 됨
검색속도가 일렬 방식(list, vector)보다 빠름
단점으로는 삽입 삭제가 빈번하면 안됨!!!(할때마다 정렬하고 있음.)


-set

map과 같은 기능 이지만 map과는 다르게 key만 저장(고로... 트리 구조?)
key를 신속하게 찾고, 또 key가 정렬되기를 원할때 사용됨.




STL아님
- hash table
hash_map과 hash_set이 사용하는 자료구조
테이블에 자료를 저장할때 키값을 해시 함수에 대입하여 버킷 번호가 나오면 그 버킷의 빈 슬롯에 자료를 저장
버킷 번호에 자료를 넣으므로 많은 자료를 저장해도 삽입, 삭제, 검색 속도가 거의 일정

- hash_map
장점 : 많은 자료를 저장하고 있어도 검색이 빠름
단점 : 자료가 적으면 메모리 낭비와 검색시 오버헤드 생김

검색이 빠르다고 무분별하게 사용하면 안됨. 컨테이너를 추가 삭제하는 것은 list, vector가 훨씬 빠름
적은 요소를 저장하여 검색을 하는 경우네는 vector,list를 사용하고 수천의 자료를 저장하여 검색을 하는 경우에는 hash_map을 사용

map과의 차이 : 정렬 안함


- hash_set
hash_map처럼 hash table을 자료구조로 사용하고 set처럼 key만을 저장
이또한 정렬이 필요 없을때 사용할것

간단하게 쓰고 싶을때는 배열
동적으로 쓰고 싶다 vector 나 list
여기서 번호(key)로 찾고 싶으면(랜덤검색) vector를 쓰고
중간에 값을 넣거나 빼고 싶으면 list를 써라
만약 검색을 자주 할거 같으면 map을 쓸것이고(정렬되있음)(삽입삭제 자주 하지 말것)
key만 필요하면 set을 써라(정렬되있음)
검색이 빈번하고 데이터가 많으면 hash_map을 쓸것이고(정렬안함)
이또한 key만 필요 하다면 hash_set을 써라(정렬안함)
